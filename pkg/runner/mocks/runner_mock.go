// Code generated by MockGen. DO NOT EDIT.
// Source: runner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	exec "invoker/pkg/exec"
	protocol "invoker/pkg/protocol"
	units "invoker/pkg/units"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContainerPool is a mock of ContainerPool interface.
type MockContainerPool struct {
	ctrl     *gomock.Controller
	recorder *MockContainerPoolMockRecorder
}

// MockContainerPoolMockRecorder is the mock recorder for MockContainerPool.
type MockContainerPoolMockRecorder struct {
	mock *MockContainerPool
}

// NewMockContainerPool creates a new mock instance.
func NewMockContainerPool(ctrl *gomock.Controller) *MockContainerPool {
	mock := &MockContainerPool{ctrl: ctrl}
	mock.recorder = &MockContainerPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerPool) EXPECT() *MockContainerPoolMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockContainerPool) Get(ctx context.Context, namespace string, fnMeta protocol.ActivationMessageFunction, kind string, memory units.ByteSize) (*exec.PooledContainer, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, namespace, fnMeta, kind, memory)
	ret0, _ := ret[0].(*exec.PooledContainer)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockContainerPoolMockRecorder) Get(ctx, namespace, fnMeta, kind, memory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContainerPool)(nil).Get), ctx, namespace, fnMeta, kind, memory)
}

// Put mocks base method.
func (m *MockContainerPool) Put(ctx context.Context, container *exec.PooledContainer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", ctx, container)
}

// Put indicates an expected call of Put.
func (mr *MockContainerPoolMockRecorder) Put(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockContainerPool)(nil).Put), ctx, container)
}

// PutToDestroy mocks base method.
func (m *MockContainerPool) PutToDestroy(ctx context.Context, container *exec.PooledContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutToDestroy", ctx, container)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutToDestroy indicates an expected call of PutToDestroy.
func (mr *MockContainerPoolMockRecorder) PutToDestroy(ctx, container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutToDestroy", reflect.TypeOf((*MockContainerPool)(nil).PutToDestroy), ctx, container)
}
