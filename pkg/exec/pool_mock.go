// Code generated by MockGen. DO NOT EDIT.
// Source: pool.go

// Package exec is a generated GoMock package.
package exec

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFirewall is a mock of Firewall interface.
type MockFirewall struct {
	ctrl     *gomock.Controller
	recorder *MockFirewallMockRecorder
}

// MockFirewallMockRecorder is the mock recorder for MockFirewall.
type MockFirewallMockRecorder struct {
	mock *MockFirewall
}

// NewMockFirewall creates a new mock instance.
func NewMockFirewall(ctrl *gomock.Controller) *MockFirewall {
	mock := &MockFirewall{ctrl: ctrl}
	mock.recorder = &MockFirewallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirewall) EXPECT() *MockFirewallMockRecorder {
	return m.recorder
}

// NeedsPerContainerFirewallSetup mocks base method.
func (m *MockFirewall) NeedsPerContainerFirewallSetup(namespace string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsPerContainerFirewallSetup", namespace)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeedsPerContainerFirewallSetup indicates an expected call of NeedsPerContainerFirewallSetup.
func (mr *MockFirewallMockRecorder) NeedsPerContainerFirewallSetup(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsPerContainerFirewallSetup", reflect.TypeOf((*MockFirewall)(nil).NeedsPerContainerFirewallSetup), namespace)
}

// SetupPerContainerFirewall mocks base method.
func (m *MockFirewall) SetupPerContainerFirewall(ctx context.Context, containerIP, namespace string) (func(context.Context) error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupPerContainerFirewall", ctx, containerIP, namespace)
	ret0, _ := ret[0].(func(context.Context) error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupPerContainerFirewall indicates an expected call of SetupPerContainerFirewall.
func (mr *MockFirewallMockRecorder) SetupPerContainerFirewall(ctx, containerIP, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupPerContainerFirewall", reflect.TypeOf((*MockFirewall)(nil).SetupPerContainerFirewall), ctx, containerIP, namespace)
}
