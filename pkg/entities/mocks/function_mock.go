// Code generated by MockGen. DO NOT EDIT.
// Source: function.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entities "invoker/pkg/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFunctionReader is a mock of FunctionReader interface.
type MockFunctionReader struct {
	ctrl     *gomock.Controller
	recorder *MockFunctionReaderMockRecorder
}

// MockFunctionReaderMockRecorder is the mock recorder for MockFunctionReader.
type MockFunctionReaderMockRecorder struct {
	mock *MockFunctionReader
}

// NewMockFunctionReader creates a new mock instance.
func NewMockFunctionReader(ctrl *gomock.Controller) *MockFunctionReader {
	mock := &MockFunctionReader{ctrl: ctrl}
	mock.recorder = &MockFunctionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFunctionReader) EXPECT() *MockFunctionReaderMockRecorder {
	return m.recorder
}

// GetFunction mocks base method.
func (m *MockFunctionReader) GetFunction(ctx context.Context, fqdn, rev string) (*entities.Function, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFunction", ctx, fqdn, rev)
	ret0, _ := ret[0].(*entities.Function)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFunction indicates an expected call of GetFunction.
func (mr *MockFunctionReaderMockRecorder) GetFunction(ctx, fqdn, rev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunction", reflect.TypeOf((*MockFunctionReader)(nil).GetFunction), ctx, fqdn, rev)
}
